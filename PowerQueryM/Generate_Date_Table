let
    #"Input StartDate" = #date(2020, 3, 12),
    StartDate = Date.StartOfYear(Date.From(#"Input StartDate")),
    EndDate = Date.From(Date.EndOfYear(DateTime.FixedLocalNow())),
    CurrentDate = Date.From(DateTime.FixedLocalNow()),
    CurrentWeekDate = Date.StartOfWeek(Date.From(DateTime.FixedLocalNow())),
    ListDates = List.Dates(StartDate, Number.RoundDown(Decimal.From(EndDate)) - Number.RoundDown(Decimal.From(StartDate)) +1, #duration(1,0,0,0)),
    #"List to Table" = Table.FromList(ListDates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Renamed Column1 as Date" = Table.RenameColumns(#"List to Table",{{"Column1", "Date"}}),
    #"Date to Date type" = Table.TransformColumnTypes(#"Renamed Column1 as Date",{{"Date", type date}}),
    #"Added Date_Week" = Table.AddColumn(#"Date to Date type", "Date_Week", each Date.StartOfWeek([Date]), type date),
    #"Added Date_Month" = Table.AddColumn(#"Added Date_Week", "Date_Month", each Date.StartOfMonth([Date]), type date),
    #"Added Quarter" = Table.AddColumn(#"Added Date_Month", "Quarter", each "Q" & Text.From(Date.QuarterOfYear([Date])), type text),
    #"Added Year" = Table.AddColumn(#"Added Quarter", "Year", each Date.Year([Date]), Int64.Type),
    #"Added Year-Quarter" = Table.AddColumn(#"Added Year", "Year-Quarter", each Text.Combine({Text.From([Year], "en-CA"), [Quarter]}, "-"), type text),
    #"Added WeekNum" = Table.AddColumn(#"Added Year-Quarter", "WeekNum", each Date.WeekOfYear([Date_Week], Day.Sunday), Int64.Type),
    #"Added MonthNum" = Table.AddColumn(#"Added WeekNum", "MonthNum", each Date.Month([Date]), Int64.Type),
    #"Added Month ShortName" = Table.AddColumn(#"Added MonthNum", "Month ShortName", each Text.Start(Date.MonthName([Date]),3), type text),
    #"Added Month Longname" = Table.AddColumn(#"Added Month ShortName", "Month LongName", each Date.MonthName([Date]), type text),
    #"Added CurDayOffset" = Table.AddColumn(#"Added Month Longname", "CurDayOffset", each (Number.From([Date]) - Number.From(CurrentDate)), Int64.Type),
    #"Added CurWeekOffset" = Table.AddColumn(#"Added CurDayOffset", "CurWeekOffset", each (Number.From([Date_Week]) - Number.From(CurrentWeekDate))/7 , Int64.Type),
    #"Added CurMonthOffset" = Table.AddColumn(#"Added CurWeekOffset", "CurMonthOffset", each ( Date.Year([Date]) - Date.Year(CurrentDate) ) * 12 + Date.Month([Date]) - Date.Month(CurrentDate), Int64.Type),
    #"Added CurQuarterOffset" = Table.AddColumn(#"Added CurMonthOffset", "CurQuarterOffset", each ( Date.Year([Date]) - Date.Year(CurrentDate) )*4 + Number.RoundUp(Date.Month([Date]) / 3) - Number.RoundUp(Date.Month(CurrentDate) / 3), Int64.Type),
    #"Added CurYearOffset" = Table.AddColumn(#"Added CurQuarterOffset", "CurYearOffset", each Date.Year([Date]) - Date.Year(CurrentDate), Int64.Type),
    #"Added ShortMonth-Year" = Table.AddColumn(#"Added CurYearOffset", "ShortMonth-Year", each [Month ShortName] & "-" & Text.End(Text.From([Year]),2), type text),
    #"Added WeekdayNum" = Table.AddColumn(#"Added ShortMonth-Year", "WeekdayNum", each Date.DayOfWeek([Date]), Int64.Type),
    #"Added WeekdayName" = Table.AddColumn(#"Added WeekdayNum", "WeekdayName", each Text.Start(Date.DayOfWeekName([Date]),3), type text),
    #"Added IsWeekend" = Table.AddColumn(#"Added WeekdayName", "IsWeekend", each if [WeekdayNum] = 0 or [WeekdayNum] = 6 then "Weekend" else "Week", type text)
in
    #"Added IsWeekend"

// Please People, split your timestamps into Dates and Time Columns, your Dataset Size will love you

// CurrXXXOffset : (These are the count of periods between said date and now), very usefull to filter to always see the last x days / weeks/ month / Qtr / yrs.
